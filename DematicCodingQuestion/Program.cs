// See https://aka.ms/new-console-template for more information
using DematicCodingQuestion.Models;
using Microsoft.AspNetCore.Http;
using Newtonsoft.Json;
using System.Runtime.Serialization;
using System.Text;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Serialization;

Console.WriteLine("Hello, World!");

static List<string> GetXmlString()
{
    //Operations os = new Operations();
    //XmlDocument xmlDoc = new XmlDocument();
    //try
    //{
    //    xmlDoc.Load("C:\\Users\\adoni\\Desktop\\d2.xml");
    //}
    //catch (XmlException e)
    //{
    //    Console.WriteLine(e.Message);
    //}

    XDocument xdoc = XDocument.Load("C:\\Users\\adoni\\Desktop\\d2.xml");

    Operations op = new Operations();

    List<string> values = xdoc.Descendants("Value").Select(x => x.Value).ToList();

    using (var writer = xdoc.CreateWriter())
    {
        // write xml into the writer
        var serializer = new DataContractSerializer(op.GetType());
        serializer.WriteObject(writer, op);
    }

    Console.WriteLine(xdoc.ToString());

 

    return null;
    


    //using (FileStream fileStream = new FileStream("C:\\Users\\adoni\\Desktop\\d2.xml", FileMode.Open)) 
    //{
    //    XmlSerializer xmlSerializer = new XmlSerializer(typeof(Operations));
    //    Operations result = (Operations)xmlSerializer.Deserialize(fileStream);
    //    //List<Operation> res = (List<Operation>)xmlSerializer.Deserialize(fileStream);
    //    //foreach (var a in result.Value)
    //    //{
    //    //    Console.WriteLine(a);
    //    //    Console.WriteLine("Dsads");

    //    return null ;
    //}

    //XmlNodeList value = xmlDoc.GetElementsByTagName("Value");
    //foreach (XmlNode valueNode in value)
    //{
    //    .Add(valueNode.InnerText);
    //}
    // var serializer = new XmlSerializer(typeof(List<Operation>));
    //List<Operation> result = new List<Operation>();
    //foreach (XmlNode node in xmlDoc.DocumentElement.ChildNodes)
    //{
    //    result.Add(List< Operation > serializer.Deserialize(xmlDoc)); 
    //    sb.Append(char.ToUpper(node.Name[0]));
    //    sb.Append(node.Name.Substring(1));
    //    sb.Append(' ');
    //    sb.AppendLine();
    //}

    //XmlSerializer xmlSerializer = new XmlSerializer(typeof(Operation));

    //List <Operation> result = (List<Operation>)xmlSerializer.Deserialize(xmlDoc);
    //return null;



    //StringBuilder sb = new StringBuilder();
    //foreach (XmlNode node in xmlDoc.DocumentElement.ChildNodes)
    //{
    //    sb.Append(char.ToUpper(node.Name[0]));
    //    sb.Append(node.Name.Substring(1));
    //    sb.Append(' ');
    //    sb.AppendLine();
    //}
    //return sb;
}

//static MathsModel GetJsonString()
//{
//    using (StreamReader r = new StreamReader("C:\\Users\\adoni\\Desktop\\s.json"))
//    {
//        string json = r.ReadToEnd();
//        MathsModel result = JsonConvert.DeserializeObject<MathsModel>(json);
//        return result;
//    }

//}

//void WriteBookData(XmlWriter writer, Operation operation)
//{

//    writer.WriteElementString("Operation ID", operation.OperationId);
//    writer.WriteElementString("Value", operation.Value);
//    writer.WriteElementString("Value", operation.Value);
//    writer.WriteEndElement();
//}

//void abc(List<Operation>Operations)
//{
//    XmlWriterSettings settings = new XmlWriterSettings();
//    settings.Indent = true;
//    using (XmlWriter writer = XmlWriter.Create(@"Products.xml", settings))
//    {

//        writer.WriteStartDocument();
//        writer.WriteComment("This file is generated by the program.");
//        writer.WriteStartElement("employees");
//        foreach (Operation operation in Operations)
//        {
//            WriteBookData(writer, operation);

//        }
//        writer.WriteEndElement();
//        writer.WriteEndDocument();
//        writer.Flush();


//    }
//}

//foreach (var item in GetXmlString())
//{
//    //abc(item.FirstName, item.LastName, item.Title, item.Division, GetXmlString().Operations.Count);
//    Console.WriteLine(item);
//}

//abc(GetXmlString().Operations);

//foreach (var item in GetJsonString().Operations)
//{
//    //abc(item.FirstName, item.LastName, item.Title, item.Division, GetXmlString().Operations.Count);
//    Console.WriteLine(item.FirstName);
//}

//foreach(var a in GetXmlString())
//{
//    Console.WriteLine(a);
//}

GetXmlString();


