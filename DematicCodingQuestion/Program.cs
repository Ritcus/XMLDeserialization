// See https://aka.ms/new-console-template for more information

using DematicCodingQuestion.Models;

using Newtonsoft.Json;
using System.Reflection;
using System.Text.RegularExpressions;
using System.Xml;
using System.Xml.Linq;


Console.WriteLine("Hello, World!");

MainFunction();

void MainFunction()
{

    Console.WriteLine("Please enter the path of XML/Json file in 'C:\\Users\\repos\\DematicCodingQuestion\\DematicCodingQuestion\\XML\\d2.xml' format");

    string path = Convert.ToString(Console.ReadLine());

    while (!path.Contains("\\"))
    {
        Console.WriteLine("Error!! Path not valid, Please re-enter the path..");
        path = Convert.ToString(Console.ReadLine());
    }

    string getFileExtension = Path.GetExtension(path);

    if (getFileExtension == ".json")
    {
        JsonCalculator(path);
    }
    else if (getFileExtension == ".xml")
    {
        
        XmlCalculator(path);
    }
    else
    {
        Console.WriteLine("Sorry! We are yet to support " + getFileExtension + " file extension. Please come back later......");
    }

}

double Calculator(string mathOperator, List<double> value)
{
    double FinalValue = 0.00;
    switch (mathOperator)
    {
        case "Plus":
            FinalValue = value.Sum(); ;
            break;
        case "Subtraction":
            {
                FinalValue = value[0];
                for (int i = 0; i < value.Count; i++)
                {
                    FinalValue -= value[i + 1];
                }
            }

            break;
        case "Multiplication":
            FinalValue = 1;
            for (int i = 0; i < value.Count; i++)
            {
                FinalValue *= value[i];
            }
            break;
        case "Division":
            FinalValue = value[0];


            for (int i = 0; i < value.Count; i++)
            {
                FinalValue /= value[i + 1];
            }
            break;
        default:
            FinalValue = 0.00;
            break;
    }
    return FinalValue;
}

    void XmlCalculator(string path)
    {
    try
    {
        XDocument doc = XDocument.Load(path);

        MathsOperation mathsOp = new MathsOperation();
        OperationOperation operationOp = new OperationOperation();

        mathsOp.Value = doc.Element("Maths").Element("Operation").Elements("Value").Select(x => Convert.ToDouble(x.Value)).ToList();
        operationOp.Value = doc.Element("Maths").Element("Operation").Element("Operation").Elements("Value").Select(x => Convert.ToDouble(x.Value)).ToList();

        mathsOp.Id = doc.Element("Maths").Element("Operation").Attribute("ID").Value;
        operationOp.Id = doc.Element("Maths").Element("Operation").Element("Operation").Attribute("ID").Value;
        mathsOp.Operation = operationOp;

        OperationCal(mathsOp);
    }
    catch(Exception ex)
    {
        Console.WriteLine("Error occured while processing the file. Please check the error: "+ ex.Message);
    }
}


void JsonCalculator(string path)
{
    try
    {
        using (StreamReader sr = new StreamReader(path))
        {
            string json = sr.ReadToEnd();
            Root root = JsonConvert.DeserializeObject<Root>(json);
            OperationCal(root.Maths.Operation);
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Error occured while processing the file. Please check the error: " + ex.Message);
    }
}


void OperationCal(MathsOperation mathsOperation)
{
    double firstNodeCalculation = Calculator(mathsOperation.Id, mathsOperation.Value);
    double final = 0.00;

    if (mathsOperation.Operation.Id.Length > 0)
    {
        double secondNodeCalculation = Calculator(mathsOperation.Operation.Id, mathsOperation.Operation.Value);

        MathsOperation newMathOperation = new MathsOperation();

        List<double> newValue = new List<double>() { firstNodeCalculation, secondNodeCalculation };
        newMathOperation.Id = mathsOperation.Id;
        newMathOperation.Value = newValue;

       final = Calculator(newMathOperation.Id, newMathOperation.Value);
    }

    XMLGenerator(final);

}


void XMLGenerator(double finalValue)
{
    try
    {
        XmlWriterSettings writerSettings = new XmlWriterSettings();
        writerSettings.Indent = true;
        using (XmlWriter writer = XmlWriter.Create(@"CaculatedXMLFile.xml", writerSettings))
        {

            writer.WriteStartDocument();
            writer.WriteComment("This file is generated by the program.");
            writer.WriteStartElement("Maths");
            writer.WriteStartElement("Operation");
            writer.WriteElementString("FinalValue", finalValue.ToString());
            writer.WriteEndElement();
            writer.WriteEndElement();
            writer.WriteEndDocument();
            writer.Flush();
        }

        Console.WriteLine("A new XML file CaculatedXMLFile.xml with the result has been create at \\bin\\Debug\\net6.0\\");
    }
    catch(Exception ex)
    {
        Console.WriteLine("Error occured while creating the XML file. Please check the error: " + ex.Message);
    }
}

